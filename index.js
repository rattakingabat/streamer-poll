// index.js
// Extens√£o Streamer Poll Event para SillyTavern com corre√ß√µes no registro do evento e toggle

// Importa as fun√ß√µes necess√°rias
import { sendMessageAsUser, eventSource, event_types } from "../../../../script.js";
import { SlashCommandParser } from '../../../slash-commands/SlashCommandParser.js';
import { SlashCommand } from '../../../slash-commands/SlashCommand.js';

// Vari√°veis globais da extens√£o
let isActive = false; // Script come√ßa desligado
let messageCount = 0;
let eventChance = 0.1; // Chance inicial de 10%
const increaseRate = 0.05; // Aumenta 5% a cada mensagem sem evento
const maxChance = 0.5; // Chance m√°xima de 50%
const cooldownMessages = 7; // Cooldown de 7 mensagens ap√≥s um evento
let cooldownCounter = 0; // Contador de cooldown

// Vari√°veis configur√°veis
const numPollOptions = 4; // N√∫mero de op√ß√µes de pollOptions
const numNeverPollOptions = 2; // N√∫mero de op√ß√µes de neverPollOptions
let pollOptions = [];
let neverPollOptions = [];
let messages = {};

// Hist√≥rico das op√ß√µes selecionadas nas √∫ltimas 7 rodadas
const pollHistoryRounds = []; // array de arrays, cada array cont√©m as op√ß√µes selecionadas em uma rodada
const maxHistoryRounds = 7; // n√∫mero m√°ximo de rodadas a serem mantidas no hist√≥rico

function handleMessage(data) {
    console.log("Streamer Poll Event: Nova mensagem do usu√°rio detectada.");
    if (isActive) {
        checkForRandomEvent();
    }
}

// Fun√ß√£o para registrar o evento
function registerEvent() {
    if (eventSource && eventSource.on) {
        eventSource.on(event_types.MESSAGE_RECEIVED, handleMessage);
        console.log("Streamer Poll Event: Evento MESSAGE_RECEIVED registrado com sucesso.");
    } else {
        console.warn("Streamer Poll Event: N√£o foi poss√≠vel registrar o evento MESSAGE_SENT. eventSource n√£o est√° dispon√≠vel.");
    }
}

registerEvent();

// Fun√ß√£o para carregar o arquivo de configura√ß√£o JSON
function loadConfig() {
    const configUrl = new URL('config.json', import.meta.url).href;

    fetch(configUrl)
        .then(response => response.json())
        .then(config => {
            pollOptions = config.pollOptions || [];
            neverPollOptions = config.neverPollOptions || [];
            messages = config.messages || {};

            console.log("Streamer Poll Event: Configura√ß√£o carregada com sucesso.");
            console.log("Op√ß√µes da enquete:", pollOptions);
            console.log("Op√ß√µes que nunca ser√£o selecionadas:", neverPollOptions);
            console.log("Mensagens personalizadas:", messages);
        })
        .catch(error => {
            console.error("Streamer Poll Event: Erro ao carregar o arquivo de configura√ß√£o:", error);
            // Define valores padr√£o caso ocorra um erro
            pollOptions = [
                "Jogar um novo game",
                "Fazer um desafio",
                "Responder perguntas",
                "Contar uma hist√≥ria engra√ßada",
                "Mostrar bastidores",
                "Iniciar um sorteio",
                "Realizar uma vota√ß√£o de popularidade",
                "Fazer um tutorial ao vivo",
                "Compartilhar dicas exclusivas",
                "Convidar um espectador para participar"
            ];
            neverPollOptions = ["Op√ß√£o secreta 1", "Op√ß√£o secreta 2"];
            messages = {
                pollIntro: `üë©‚Äçüíª *Sorrindo para a c√¢mera, ela diz:* "E a√≠, pessoal! Vamos fazer uma enquete r√°pida! O que voc√™s acham?"\n\n`,
                pollOption: "üîπ {index}. {option}\n",
                pollResult: `üéâ *Ela anuncia animadamente:* "E a op√ß√£o vencedora √©... **{winningOption}** com {winningPercentage}% dos votos! Obrigada por participarem, pessoal!"

Total de votos: {totalVotes}

{voteBreakdown}`
            };

            console.log("Streamer Poll Event: Usando configura√ß√µes padr√£o.");
        });
}

// Chama a fun√ß√£o para carregar a configura√ß√£o ao iniciar a extens√£o
loadConfig();

// Fun√ß√£o para verificar e disparar o evento aleat√≥rio
function checkForRandomEvent() {
    console.log("Streamer Poll Event: Verificando se o evento deve ocorrer...");

    if (cooldownCounter > 0) {
        cooldownCounter--;
        console.log(`Streamer Poll Event: Em cooldown. Mensagens restantes no cooldown: ${cooldownCounter}`);
        return;
    }

    messageCount++;
    console.log(`Streamer Poll Event: Contador de mensagens: ${messageCount}`);

    const randomNumber = Math.random();
    console.log(`Streamer Poll Event: N√∫mero aleat√≥rio gerado: ${randomNumber}`);
    console.log(`Streamer Poll Event: Chance atual do evento: ${eventChance}`);

    if (randomNumber < eventChance) {
        console.log("Streamer Poll Event: Evento disparado!");
        // Resetar ap√≥s o evento ocorrer
        messageCount = 0;
        eventChance = 0.1;
        cooldownCounter = cooldownMessages;
        triggerPollEvent();
        console.log(`Streamer Poll Event: Cooldown iniciado por ${cooldownMessages} mensagens.`);
    } else {
        // Aumentar a chance para a pr√≥xima mensagem
        eventChance = Math.min(eventChance + increaseRate, maxChance);
        console.log(`Streamer Poll Event: Evento n√£o ocorreu. Nova chance do evento: ${eventChance}`);
    }
}

// Fun√ß√£o para substituir placeholders nas mensagens
function formatMessage(template, data) {
    return template.replace(/{(.*?)}/g, (match, key) => data[key.trim()] || "");
}

// Fun√ß√£o para selecionar N elementos aleat√≥rios de um array sem repeti√ß√£o
function getRandomElements(array, n) {
    let result = [];
    let len = array.length;
    let taken = new Array(len);

    if (n > len) n = len;

    while (result.length < n) {
        let randomIndex = Math.floor(Math.random() * len);
        if (!taken[randomIndex]) {
            result.push(array[randomIndex]);
            taken[randomIndex] = true;
        }
    }
    return result;
}

// Fun√ß√£o para disparar a enquete
function triggerPollEvent() {
    if (pollOptions.length === 0) {
        console.warn("Streamer Poll Event: Nenhuma op√ß√£o de enquete dispon√≠vel.");
        return;
    }

    // Seleciona 2 itens de neverPollOptions
    const neverOptionsToAdd = getRandomElements(neverPollOptions, numNeverPollOptions);

    // Obt√©m as op√ß√µes selecionadas nas √∫ltimas 7 rodadas
    const optionsInHistory = pollHistoryRounds.flat();

    // Cria uma lista de op√ß√µes dispon√≠veis excluindo as neverPollOptions e as op√ß√µes selecionadas nas √∫ltimas 7 rodadas
    const optionsPool = pollOptions.filter(option => !neverPollOptions.includes(option) && !optionsInHistory.includes(option));

    if (optionsPool.length < numPollOptions) {
        console.warn("Streamer Poll Event: N√£o h√° op√ß√µes suficientes para selecionar.");
        return;
    }

    // Seleciona aleatoriamente as op√ß√µes da enquete
    const selectedOptions = getRandomElements(optionsPool, numPollOptions);

    // Combina as op√ß√µes
    const options = selectedOptions.concat(neverOptionsToAdd);

    console.log("Streamer Poll Event: Op√ß√µes selecionadas para a enquete:", options);

    let pollMessage = formatMessage(messages.pollIntro, {});

    options.forEach((option, index) => {
        pollMessage += formatMessage(messages.pollOption, {
            index: index + 1,
            option
        });
    });

    // Adiciona as op√ß√µes selecionadas ao hist√≥rico
    pollHistoryRounds.push(selectedOptions);

    // Mant√©m apenas as √∫ltimas 7 rodadas no hist√≥rico
    if (pollHistoryRounds.length > maxHistoryRounds) {
        pollHistoryRounds.shift();
    }

    sendMessageAsUser(pollMessage + "\n\n\n" + simulatePollResults(selectedOptions, neverOptionsToAdd));
}

// Fun√ß√£o para simular os resultados da vota√ß√£o
function simulatePollResults(selectedOptions, neverOptions) {
    // Inicializa o objeto de votos
    let votes = {};

    // Gera votos totais entre 5000 e 10000
    const totalVotes = Math.floor(Math.random() * 3001) + 7000;

    // Gera porcentagens para neverOptions (0-2%), incluindo zero
    let neverOptionPercentages = neverOptions.map(() => Math.floor(Math.random() * 3));

    // Soma das porcentagens de neverOptions
    const totalNeverPercentage = neverOptionPercentages.reduce((a, b) => a + b, 0);

    // Porcentagem restante para distribuir entre selectedOptions
    let remainingPercentage = 100 - totalNeverPercentage;

    // Garante que winningOption tenha a maior porcentagem
    const winningIndex = Math.floor(Math.random() * selectedOptions.length);
    const winningOption = selectedOptions[winningIndex];

    // Outras op√ß√µes excluindo winningOption
    let otherOptions = selectedOptions.filter((_, index) => index !== winningIndex);

    // Define porcentagem m√≠nima para winningOption
    let minWinningPercentage = Math.floor(remainingPercentage / 2) + 1;
    let maxWinningPercentage = remainingPercentage - otherOptions.length; // Garante pelo menos 1% para cada otherOption

    // Porcentagem de winningOption √© aleat√≥ria entre minWinningPercentage e maxWinningPercentage
    let winningPercentage = Math.floor(Math.random() * (maxWinningPercentage - minWinningPercentage + 1)) + minWinningPercentage;

    // Porcentagem restante ap√≥s atribuir a winningOption
    let remainingAfterWinning = remainingPercentage - winningPercentage;

    // Distribui remainingAfterWinning entre otherOptions
    let otherPercentages = [];
    if (otherOptions.length > 0) {
        let totalOtherPercentage = 0;
        otherOptions.forEach((option, index) => {
            let optionsLeft = otherOptions.length - index - 1;
            if (optionsLeft > 0) {
                let maxPercentage = remainingAfterWinning - totalOtherPercentage - optionsLeft;
                let percentage = Math.floor(Math.random() * (maxPercentage)) + 1; // Garante pelo menos 1%
                otherPercentages.push(percentage);
                totalOtherPercentage += percentage;
            } else {
                // √öltima otherOption
                let percentage = remainingAfterWinning - totalOtherPercentage;
                otherPercentages.push(percentage);
            }
        });
    }

    // Compila os votos
    votes[winningOption] = winningPercentage;
    otherOptions.forEach((option, index) => {
        votes[option] = otherPercentages[index];
    });
    neverOptions.forEach((option, index) => {
        votes[option] = neverOptionPercentages[index];
    });

    // Calcula o n√∫mero de votos para cada op√ß√£o
    let voteCounts = {};
    for (let option in votes) {
        voteCounts[option] = Math.round((votes[option] / 100) * totalVotes);
    }

    // Ordena as op√ß√µes por porcentagem em ordem decrescente
    const sortedOptions = Object.keys(votes).sort((a, b) => votes[b] - votes[a]);

    // Cria o detalhamento dos votos
    let voteBreakdown = "";
    sortedOptions.forEach((option, index) => {
        voteBreakdown += `${index + 1}. ${option} - ${votes[option]}% (${voteCounts[option]} votos)\n`;
    });

    const resultMessage = formatMessage(messages.pollResult, {
        winningOption,
        winningPercentage,
        totalVotes,
        voteBreakdown
    });

    return resultMessage;
}

// Registrar os comandos de barra
if (typeof SlashCommandParser !== 'undefined') {
    SlashCommandParser.addCommandObject(SlashCommand.fromProps({
        name: 'resetStreamerPoll',
        callback: (namedArgs, unnamedArgs) => {
            isActive = true;
            messageCount = 0;
            eventChance = 0.1;
            cooldownCounter = 0;
            return "Streamer Poll Event foi reiniciado e ativado.";
        },
        description: 'Reinicia e ativa o Streamer Poll Event.',
    }));

    SlashCommandParser.addCommandObject(SlashCommand.fromProps({
        name: 'stopStreamerPoll',
        callback: (namedArgs, unnamedArgs) => {
            isActive = false;
            return "Streamer Poll Event foi desativado.";
        },
        description: 'Desativa o Streamer Poll Event.',
    }));

    console.log("Streamer Poll Event: Comandos de barra registrados.");
} else {
    console.warn("Streamer Poll Event: SlashCommandParser n√£o est√° dispon√≠vel.");
}
